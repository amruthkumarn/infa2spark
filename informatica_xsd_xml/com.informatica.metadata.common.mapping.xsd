<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://com.informatica.metadata.common.mapping/2" xmlns:binding="http://com.informatica.metadata.common.binding/1" xmlns:core="http://com.informatica.metadata.common.core/2" xmlns:imx="http://com.informatica.imx" xmlns:mapping="http://com.informatica.metadata.common.mapping/2" xmlns:output="http://com.informatica.metadata.common.output/1" xmlns:parameter="http://com.informatica.metadata.common.parameter/9" xmlns:transformation="http://com.informatica.metadata.common.transformation/3" xmlns:typelibrary="http://com.informatica.metadata.common.typesystem.typelibrary/2" xmlns:types="http://com.informatica.metadata.common.types/2" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://com.informatica.metadata.common.mapping/2">
<xsd:import namespace="http://com.informatica.metadata.common.output/1" schemaLocation="com.informatica.metadata.common.output.xsd"/>
<xsd:import namespace="http://com.informatica.metadata.common.core/2" schemaLocation="com.informatica.metadata.common.core.xsd"/>
<xsd:import namespace="http://com.informatica.metadata.common.types/2" schemaLocation="com.informatica.metadata.common.types.xsd"/>
<xsd:import namespace="http://com.informatica.metadata.common.typesystem.typelibrary/2" schemaLocation="com.informatica.metadata.common.typesystem.typelibrary.xsd"/>
<xsd:import namespace="http://com.informatica.metadata.common.parameter/9" schemaLocation="com.informatica.metadata.common.parameter.xsd"/>
<xsd:import namespace="http://com.informatica.metadata.common.binding/1" schemaLocation="com.informatica.metadata.common.binding.xsd"/>
<xsd:import namespace="http://com.informatica.metadata.common.transformation/3" schemaLocation="com.informatica.metadata.common.transformation.xsd"/>
<xsd:import namespace="http://com.informatica.imx" schemaLocation="IMX.xsd"/>
<xsd:complexType name="FieldMapLinkage">
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
<xsd:element name="linkPolicy" type="mapping:LinkPolicy"/>
<xsd:element name="paramFieldMapWrapper" type="mapping:ParamFieldMapPortWrapper"/>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
<xsd:attribute name="fromDataInterface" type="imx:idref"/>
<xsd:attribute name="linkPolicyEnabled" type="xsd:boolean"/>
<xsd:attribute name="parameterEnabled" type="xsd:boolean"/>
<xsd:attribute name="toDataInterface" type="imx:idref"/>
<xsd:attribute name="toInstance" type="imx:idref"/>
<xsd:attribute name="paramFieldMapWrapper." type="imx:idref"/>
</xsd:complexType>
<xsd:element name="FieldMapLinkage" type="mapping:FieldMapLinkage"/>
<xsd:complexType name="FieldMapSpec">
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
<xsd:element name="fieldMapLinkages">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="FieldMapLinkage" type="mapping:FieldMapLinkage"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="fieldMapPorts">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="FieldMapPort" type="mapping:FieldMapPort"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
</xsd:complexType>
<xsd:element name="FieldMapSpec" type="mapping:FieldMapSpec"/>
<xsd:complexType name="LinkageOrder">
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
<xsd:attribute name="fieldMapLinkages" type="imx:idrefs"/>
<xsd:attribute name="toDataInterface" type="imx:idref"/>
</xsd:complexType>
<xsd:element name="LinkageOrder" type="mapping:LinkageOrder"/>
<xsd:complexType abstract="true" name="LoadOrderConstraint">
<xsd:annotation>
<xsd:documentation> This is currently limited to instances of TargetTx. 
 Semantics are defined by the actual class type (derived class type). 
</xsd:documentation>
</xsd:annotation>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
<xsd:attribute name="primaryInstance" type="imx:idref"/>
<xsd:attribute name="secondaryInstance" type="imx:idref"/>
</xsd:complexType>
<xsd:complexType name="LoadOrderStrategy">
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
<xsd:element name="constraints">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="LoadOrderConstraint" type="mapping:LoadOrderConstraint"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
</xsd:complexType>
<xsd:element name="LoadOrderStrategy" type="mapping:LoadOrderStrategy"/>
<xsd:complexType name="OutlineLink">
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
<xsd:attribute name="fromInstance" type="imx:idref"/>
<xsd:attribute name="toInstance" type="imx:idref"/>
</xsd:complexType>
<xsd:element name="OutlineLink" type="mapping:OutlineLink"/>
<xsd:complexType name="ParamFieldMapPort">
<xsd:annotation>
<xsd:documentation> 
 FieldMapPort represents a Port to reflect any field mapping that could be done on an expanded/ghost field under a dynamic-port field of a transformation.
 
</xsd:documentation>
</xsd:annotation>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
<xsd:attribute name="fromFieldName">
<xsd:simpleType>
<xsd:restriction base="xsd:string">
<xsd:whiteSpace value="preserve"/>
</xsd:restriction>
</xsd:simpleType>
</xsd:attribute>
<xsd:attribute name="toFieldName">
<xsd:simpleType>
<xsd:restriction base="xsd:string">
<xsd:whiteSpace value="preserve"/>
</xsd:restriction>
</xsd:simpleType>
</xsd:attribute>
</xsd:complexType>
<xsd:element name="ParamFieldMapPort" type="mapping:ParamFieldMapPort"/>
<xsd:complexType name="ParamFieldMapPortWrapper">
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element ref="imx:annotations"/>
<xsd:element name="paramFieldMapPorts">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="1">
<xsd:element name="ParamFieldMapPort" type="mapping:ParamFieldMapPort"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
</xsd:choice>
<xsd:attribute ref="imx:id"/>
<xsd:attribute ref="imx:idref"/>
<xsd:attribute ref="imx:iid"/>
</xsd:complexType>
<xsd:element name="ParamFieldMapPortWrapper" type="mapping:ParamFieldMapPortWrapper"/>
<xsd:complexType abstract="true" name="Characteristic">
<xsd:complexContent>
<xsd:extension base="core:Element"/>
</xsd:complexContent>
</xsd:complexType>
<xsd:complexType name="OneAfterAnotherConstraint">
<xsd:complexContent>
<xsd:extension base="mapping:LoadOrderConstraint">
<xsd:annotation>
<xsd:documentation>
 The semantics of this kind of constraint is: 
 super.primaryInstance is run to completion before super.secondaryInstance does anything.  
</xsd:documentation>
</xsd:annotation>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="OneAfterAnotherConstraint" type="mapping:OneAfterAnotherConstraint"/>
<xsd:complexType abstract="true" name="Port">
<xsd:complexContent>
<xsd:extension base="core:Element">
<xsd:annotation>
<xsd:documentation> AbstractTransforfmations are composed of TransformationField objects, each of which represents a value position in each row that moves through the transformation.  
 
 When an AbstractTransformation is used in a mapping, it is referenced by an Instance.  For different Instances of the same AbstractTransofmration, a different set of the its TransformationFields will be connected by data flow link.  If a TransformationField has a complex Type, data flow links may connect the StructuralFeatures nested within such a TransformationField's complex type.
 
 A port is created when there is a data flow link between any TransformationFields or StructuralFeatures.  Data flow links then manifest as bi-directional references between Port objects.
 
 When a TransformationField is typed by a ComplexType, any Port reflecting its use in a mapping may contain child NestedPorts, making it possible to create data flow links involving the StructuralFeatures nested with the ComplexType.
 
 
</xsd:documentation>
</xsd:annotation>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="children">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="NestedPort" type="mapping:NestedPort"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
</xsd:choice>
<xsd:attribute name="fromPort" type="imx:idref"/>
<xsd:attribute name="toPorts" type="imx:idrefs"/>
<xsd:attribute name="typedElement" type="imx:idref"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:complexType name="FieldMapPort">
<xsd:complexContent>
<xsd:extension base="mapping:Port">
<xsd:annotation>
<xsd:documentation> 
 FieldMapPort represents a Port to reflect any field mapping that could be done on an expanded/ghost field under a dynamic-port field of a transformation.
 
</xsd:documentation>
</xsd:annotation>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="generatedFieldRef" type="transformation:GeneratedFieldRef"/>
</xsd:choice>
<xsd:attribute name="dummyTypedElement" type="imx:idref"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="FieldMapPort" type="mapping:FieldMapPort"/>
<xsd:complexType name="Instance">
<xsd:complexContent>
<xsd:extension base="core:NamedElement">
<xsd:annotation>
<xsd:documentation> An instance
 
 
</xsd:documentation>
</xsd:annotation>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="fieldMapSpec" type="mapping:FieldMapSpec"/>
<xsd:element name="fromOutlineLinks">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="OutlineLink" type="mapping:OutlineLink"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="inputBindings">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="InputBinding" type="binding:InputBinding"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="linkageOrders">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="LinkageOrder" type="mapping:LinkageOrder"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="mapOutputExpressions">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="OutputExpression" type="transformation:OutputExpression"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="outputBindings">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="OutputBinding" type="binding:OutputBinding"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="ports">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="TransformationFieldPort" type="mapping:TransformationFieldPort"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
</xsd:choice>
<xsd:attribute name="toOutlineLinks" type="imx:idrefs"/>
<xsd:attribute name="transformation" type="imx:idref"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="Instance" type="mapping:Instance"/>
<xsd:complexType abstract="true" name="LinkPolicy">
<xsd:complexContent>
<xsd:extension base="core:NamedElement"/>
</xsd:complexContent>
</xsd:complexType>
<xsd:complexType name="Mapping">
<xsd:complexContent>
<xsd:extension base="core:NamedElement">
<xsd:annotation>
<xsd:documentation> A composite transformation is built up of other transformations.
</xsd:documentation>
</xsd:annotation>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="characteristics">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="Characteristic" type="mapping:Characteristic"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="definedLibraries" type="typelibrary:TypeLibrary"/>
<xsd:element name="instances">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="Instance" type="mapping:Instance"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="loadOrderOfTargetGroups">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="TargetGroup" type="mapping:TargetGroup"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="loadOrderStrategy" type="mapping:LoadOrderStrategy"/>
<xsd:element name="outputs">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="UserDefinedOutput" type="output:UserDefinedOutput"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="parameterBindings">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="ParameterBinding" type="binding:ParameterBinding"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="parameters">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="UserDefinedParameter" type="parameter:UserDefinedParameter"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
<xsd:element name="transformations">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded" minOccurs="0">
<xsd:element name="AbstractTransformation" type="transformation:AbstractTransformation"/>
</xsd:choice>
</xsd:complexType>
</xsd:element>
</xsd:choice>
<xsd:attribute name="importedLibraries" type="imx:idrefs"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="Mapping" type="mapping:Mapping"/>
<xsd:complexType name="NestedPort">
<xsd:complexContent>
<xsd:extension base="mapping:Port">
<xsd:annotation>
<xsd:documentation> A NestedPort is a Port that represents an occurence of a StructuralField within the ComplexType hierarchy of a TransformationField that is either:
 -- Connected directly to other Ports or that is (Port.fromPorts or port.toPort is populated)
 -- Of a complex type with descendent StructuralFeatures that are connected by a data flow link
 
 A NestedPort contains NestedPorts only if the type of its StructuralFeature is also a ComplexType.  Any NestedPort children represent the StructuralFeatures of the parent NestedPort's StructuralFeature's ComplexType.
 
 NestedPorts are only contained by TransformationFieldPorts, never directly by Instances.
 
 
</xsd:documentation>
</xsd:annotation>
<xsd:attribute name="parent" type="imx:idref"/>
<xsd:attribute name="structuralFeature" type="imx:idref"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="NestedPort" type="mapping:NestedPort"/>
<xsd:complexType name="TargetGroup">
<xsd:complexContent>
<xsd:extension base="core:NamedElement">
<xsd:annotation>
<xsd:documentation> Deprecated. This should not be exposed. It should not be used.
 (Currently LDTM happens to use it internally, but this should eventually be changed.)
</xsd:documentation>
</xsd:annotation>
<xsd:attribute name="instances" type="imx:idrefs"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="TargetGroup" type="mapping:TargetGroup"/>
<xsd:complexType name="TransformationFieldPort">
<xsd:complexContent>
<xsd:extension base="mapping:Port">
<xsd:annotation>
<xsd:documentation> A TransformationFieldPort is a Port that represents an occurence of a TransformationField that is either:
 -- Connected directly to other Ports or that is (Port.fromPorts or port.toPort is populated)
 -- Of a complex type with descendent StructuralFeatures that are connected by a data flow link
 
 A TransformationField contains NestedPorts only if its type is a ComplexType.  Any NestedPorts that are children of a TransformationFieldPort represent the StructuralFeatures of its ComplexType.
 
 TransformationFieldPorts are only contained by Instances.
 
 
</xsd:documentation>
</xsd:annotation>
<xsd:attribute name="instance" type="imx:idref"/>
<xsd:attribute name="transformationField" type="imx:idref"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="TransformationFieldPort" type="mapping:TransformationFieldPort"/>
<xsd:complexType name="DummyTypedElement">
<xsd:complexContent>
<xsd:extension base="types:TypedElement"/>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="DummyTypedElement" type="mapping:DummyTypedElement"/>
<xsd:complexType name="GroupPort">
<xsd:complexContent>
<xsd:extension base="mapping:TransformationFieldPort">
<xsd:annotation>
<xsd:documentation> Since &lt;code&gt;Instance&lt;/code&gt; already owns &lt;code&gt;TransformationFieldPort&lt;/code&gt;. We extends the &lt;code&gt;GroupPort&lt;/code&gt;
 from &lt;code&gt;TransformationFieldPort&lt;/code&gt; to reduce the amount of refactoring work
 @since 10.0
</xsd:documentation>
</xsd:annotation>
<xsd:attribute name="dataInterface" type="imx:idref"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="GroupPort" type="mapping:GroupPort"/>
<xsd:complexType name="NameLinkPolicy">
<xsd:complexContent>
<xsd:extension base="mapping:LinkPolicy">
<xsd:attribute name="affix">
<xsd:simpleType>
<xsd:restriction base="xsd:string">
<xsd:whiteSpace value="preserve"/>
</xsd:restriction>
</xsd:simpleType>
</xsd:attribute>
<xsd:attribute name="prefix" type="xsd:boolean"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="NameLinkPolicy" type="mapping:NameLinkPolicy"/>
</xsd:schema>
